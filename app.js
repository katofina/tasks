/*Метод OPTIONS -  предварительный запрос, отсылается на сервер каждый раз перед
GET и POST запросом. Используется для описания параметров соединения с сервером
и другой служебной информации. Содержит поле Allow-Origin, где указывается домен, 
с которого идёт запрос, также передаётся название метода и версия протокола. Затем 
на стороне сервера сверяется, если совпадает домен,то в ответе отправляется заголовок 
Allow, в котором содержатся все доступные методы, с которыми мы можем работать, также 
отправляется и другая дополнительная служебная информация(строка состояния, текстовый
ответ, максимальное время доступа). 

Ключевые особенности HTTP3: наличие нового универсального протокола QUIC, который
объединяет TCP и UPD протоколы. В нём также используется ускоренное шифрование, он
делает TLS быстрее и безопаснее. Может передавать несколько файлов(потоков) параллельно.
Если чать информации была утеряна, не будет передавать весь пакет заново, отправит
только утерянный фрагмент, при этом остальные потоки будут продолжать передаваться.
Используется идентификатор CID вместо адресов и портов. Новый алгоритм сжатия 
заголовкоа QPAC. */

const str1 = "Hello, world!";//Можно использовать один из трёх видов кавычек.
const str2 = new String('Hello, world!');

const num1 = 4; //Infinity(-Infinity)
const num2 = new Number(4);

const bool1 = true;//false
const bool2 = new Boolean(false);
const bool3 = 5 < 10; //проверка выражения, т.ж. && || !! !=

const zero = null;

const notFind = undefined;

const sym1 = Symbol();
const sym2 = Symbol("id");
const sym3 = Symbol.for("id");

const bigNum1 = 5n;
const bigNum2 = BigInt(5);

const obj1 = {};
const obj2 = new Object();
const func1 = function(){};
const func2 = function test(){};
function test2() {};
const func4 = new Function();
const arr = [];
const arr2 = new Array();

/*ReferenceError происходит потому, что происходит всплытие, но они попадают в мёртвую
зону, они в отличии от var остаются неинициализированными. Соответственно при попытке
доступа к ним пробрасывается исключение. Их инциализация происходит только при присваении
значения, всё перед этим называется мёртвой зоной(temporal dead zone).*/

const res = "B" + "a" + (1 - "hello");
console.log(res); // "BaNaN"

const res2 = (true && 3) + "d";
console.log(res2); //3d

const res3 = Boolean(true && 3) + "d";
console.log(res3); //trued